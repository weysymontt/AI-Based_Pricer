axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 60, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 15, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 2, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 5, xpd = TRUE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 4, xpd = TRUE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 0, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 0, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = -1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = FALSE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = FALSE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[2],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[4],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[1],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[0],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[5],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
a2xis(side=1, at=xtick, labels = FALSE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
a2xis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 0, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
a2xis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[3],
labels = xtick, srt = 45, pos = 5, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
a2xis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[0],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
text(x=xtick,  par("usr")[0],
labels = xtick, srt = 45, pos = 1, xpd = TRUE)
stl(time_series)
dim(time_series)
time_series2 <- ts(data[[1]],frequency = 12,start = (c(1997,1)))
dim(time_series2)
stl(time_series2)
data[[1]]
time_series2 <- ts(data[1],frequency = 12,start = (c(1997,1)))
stl(time_series2)
dim(time_series2)
time_series_forecasts <- HoltWinters(time_series, beta = FALSE,
gamma = FALSE)
time_series_forecasts
time_series_forecasts$fitted
plot(time_series_forecasts)
time_series_forecasts$SSE
HoltWinters(time_series, beta = FALSE,
gamma = FALSE, l.start = 23080)
library("forecast")
time_series_forecasts2 <- forecast.HoltWinters(time_series_forecasts, h=8)
time_series_forecasts <- HoltWinters(time_series, beta = FALSE,
gamma = FALSE)
time_series_forecasts
time_series_forecasts$fitted
plot(time_series_forecasts)
time_series_forecasts$SSE
HoltWinters(time_series, beta = FALSE,
gamma = FALSE, l.start = 23080)
library("forecast")
install.packages(forecast)
install.packages("forecast")
library("forecast")
time_series_forecasts2 <- forecast.HoltWinters(time_series_forecasts, h=8)
library("stats")
time_series_forecasts2 <- forecast.HoltWinters(time_series_forecasts, h=8)
time_series_forecasts2 <- stats:::HoltWinters(time_series_forecasts, h=8)
time_series_forecasts2 <- stats:::HoltWinters(time_series_forecasts)
time_series_forecasts2 <- stats:::predict.HoltWinters(time_series_forecasts, h=8)
time_series_forecasts2
m <- stats::HoltWinters(time_series_forecasts, h=8)
m <- stats::HoltWinters(time_series_forecasts)
plot(time_series_forecasts2)
time_series_forecasts2
rainseriesforecasts2 <- forecast.HoltWinters(rainseriesforecasts, h=8)
rainseriesforecasts2
time_series_forecasts <- HoltWinters(time_series, beta = FALSE,
gamma = FALSE)
time_series_forecasts
time_series_forecasts$fitted
plot(time_series_forecasts)
time_series_forecasts$SSE
HoltWinters(time_series, beta = FALSE,
gamma = FALSE, l.start = 23080)
library("forecast")
time_series_forecasts2 <- forecast(time_series_forecasts, h=8)
time_series_forecasts2
autoplot(time_series_forecasts2)
plot(forecast(time_series_forecasts2))
plot(time_series_forecasts2)
time_series_forecasts <- HoltWinters(time_series[:100], beta = FALSE,
gamma = FALSE)
adf.test(diff(log(time_series)), alternative = "stationary")
n1.vtr <- as.numeric(time_series)
p1 <- shapiro.test(n1.vtr)$p.value
p2 <- shapiro.test(diff(n1.vtr))$p.value
p3 <- shapiro.test(diff(log(n1.vtr)))$p.value
# (2-2) Plot histogram of data, diff(data), and diff(log(data))
hist(n1.vtr, prob = T, main = c("n1", paste("Shapiro p=", prettyNum(p1, digits = 2))),
xlab = "n1", xlim = c(1, 45))
lines(density(n1.vtr))
hist(diff(n1.vtr), prob = T, main = c("diff(n1)", paste("Shapiro p=", prettyNum(p2,
digits = 2))), xlab = "diff(n1)")
lines(density(diff(n1.vtr)))
hist(diff(log(n1.vtr)), prob = T, main = c("diff(log(n1))", paste("Shapiro p=",
prettyNum(p3, digits = 2))), xlab = "diff(log(n1))")
lines(density(diff(log(n1.vtr))))
hist(n1.vtr, prob = T, main = c("n1", paste("Shapiro p=", prettyNum(p1, digits = 2))),
xlab = "n1", xlim = c(1, 45))
lines(density(n1.vtr))
hist(diff(n1.vtr), prob = T, main = c("diff(n1)", paste("Shapiro p=", prettyNum(p2,
hist(n1.vtr, prob = T, main = c("n1", paste("Shapiro p=", prettyNum(p1, digits = 2))),
xlab = "n1", xlim = c(1, 45))
lines(density(n1.vtr))
hist(diff(n1.vtr), prob = T, main = c("diff(n1)", paste("Shapiro p=", prettyNum(p2,
digits = 2))), xlab = "diff(n1)")
tseries_diff1 <- diff(data$Visados, lag = 1)
tm <- cbind(data$Visados, tseries_diff1)
tseries_lag1 <- lag(data$Visados, 1)
tseries_lag3 <- lag(data$Visados, 3)
tseries_lead1 <- lag(data$Visados, -1)
tseries_diff1 <- diff(data$Visados, lag = 1)
tm <- cbind(data$Visados, tseries_diff1)
plot.ts(tm)
tseries_diff1 <- diff(data$Visados, lag = 1)
tm <- cbind(data$Visados, tseries_diff1)
tseries_diff1 <- diff(data$Visados, log = 1)
tm <- cbind(data$Visados, tseries_diff1)
logts <- log(data$Visados)
plot(logts)
p3 <- shapiro.test(diff(log(n1.vtr)))$p.value
p3
hist(diff(log(n1.vtr)), prob = T, main = c("diff(log(n1))", paste("Shapiro p=",
prettyNum(p3, digits = 2))), xlab = "diff(log(n1))")
lines(density(diff(log(n1.vtr))))
qqnorm(diff(log(time_series)))
library("tseries")
library("zoo")
library("gridExtra")
library("ggplot2")
library("forecast")
library("dplyr")
library("lmtest")
setwd("C:/Users/jmlga/OneDrive/Universidad/Master/Statistical_Data_Analysis/Assignment_03")
data <- read.csv("data_g2.csv",header=TRUE,sep=';')
data <- data %>% select(Visados)
data_log <- data %>% mutate(Visados=log(Visados))
time_series <- ts(data,frequency = 12, start=c(1997,1))
time_series_log <- ts(data_log,frequency=12,start=c(1997,1))
plot.ts(time_series)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
plot.ts(time_series_log)
xtick<-seq(1997, 2013, by=1)
axis(side=1, at=xtick, labels = FALSE)
stl_plot <- stl(time_series_log[,1],s.window="periodic")
time_series_multiplicative_decomposition <- decompose(time_series,type = "mult")
plot(stl_plot$reminder)
plot(stl_plot,title="stl()")
plot(time_series_multiplicative_decomposition)
time_series_forecasts <- HoltWinters(time_series, beta = FALSE,
gamma = FALSE)
plot(time_series_forecasts)
holtWintersResult <- stats::HoltWinters(time_series, beta = FALSE,
gamma = FALSE, l.start = 23080)
time_series_forecasts2 <- forecast(holtWintersResult)
time_series_forecasts2
plot(time_series_forecasts2)
ACF_PACF_normal <- tsdisplay(
time_series,
plot.type = c("partial", "histogram", "scatter", "spectrum"),
points = TRUE,
ci.type = c("white", "ma"),
na.action = na.contiguous,
main = NULL,
xlab = "",
ylab = "",
pch = 1,
cex = 0.5
)
ACF_PACF_logarithmic <- tsdisplay(
time_series_log,
plot.type = c("partial", "histogram", "scatter", "spectrum"),
points = TRUE,
ci.type = c("white", "ma"),
na.action = na.contiguous,
main = NULL,
xlab = "",
ylab = "",
pch = 1,
cex = 0.5
)
monthplot(time_series_log)
seasonplot(time_series_log)
plot(time_series_log)
plot(diff(time_series_log))
plot(diff(time_series_log,12))
plot(diff(diff(time_series_log,12)))
sd(time_series_log)
sd(diff(time_series_log))
sd(diff(time_series_log,12))
sd(diff(diff(time_series_log,12)))
adf.test(diff(time_series_log))
adf.test(diff(diff(time_series_log)))
adf.test(diff(diff))
pp.test(diff(time_series_log))
kpss.test(diff(time_series_log))
# Fit the model
checking_arima <- function()
{
minimum <- 0
final_result <-"result"
for(i in c(1,2,3))
{
for(j in c(1,2,3))
{
for(ii in c(1,2,3))
{
for(jj in c(1,2,3))
{
model <- Arima(log(time_series),order=c(i,2,j),seasonal=list(order=c(ii,2,jj), period=12),method="ML")
result <-paste("i=",i,
", j=",j,
", ii=",ii,
", ii=",jj,
", result=",model$aicc)
if(model$aicc<minimum)
{
minimum=model$aicc
final_result <- result
print(final_result)
}
}
}
}
}
print(paste("Final result: ",final_result))
}
checking_arima()
model.1=Arima(time_series_log,order=c(1,2,2),seasonal=list(order=c(1,2,2), period=12))
model.2=Arima(time_series_log,order=c(1,2,2),seasonal=list(order=c(1,2,3), period=12))
model.3=Arima(time_series_log,order=c(1,2,1),seasonal=list(order=c(1,2,2), period=12))
par(mfrow=c(2,2))
plot(model.1$residuals,main=paste("Model 1 - AICc =",round(model.1$aicc,2)))
plot(model.2$residuals, main=paste("Model 2 - AICc =",round(model.2$aicc,2)))
plot(model.3$residuals, main=paste("Model 3 - AICc =",round(model.3$aicc,2)))
model.1$
checkresiduals(naive(model.1$residuals))
Box.test(model.1$residuals)
jarque.bera.test(model.1$residuals)
plot(qqnorm(model.1$residuals))
model.1
fitModel <- fit(model.1, time_series)
getrmseModel <- getrmse(model.1)
rmse(time_series, model.1)
install.packages("fpp")
getrmse <- function(x,h,...){
train.end <- time(x)[length(x)-h]   #train data end
test.start <- time(x)[length(x)-h+1]  #test data start
train <- window(x,end=train.end) #extract train data
test <- window(x,start=test.start)  #extract test data
fit <- Arima(train,...) # fit model with train data
fc <- forecast(fit,h=h) # forecast with model
return(accuracy(fc,test)[2,"RMSE"]) #compare forecast with test data, extract the rmse
}
install.packages("spatstat")
library(spatstat)
data("gordon")
dataset <- data.frame("gordon")
View(dataset)
dataset <- data("gordon")
dataset <- data.frame(dataset(gordon))
dataset <- data.frame(dataset(gordon))
data("japanesepines")
View(data)
plot(japanesepines, main = NULL)
summary(japanesepines)
dataset <- japanesepines
View(dataset)
dataset <- data.frame(japanesepines)
View(dataset)
plot(dataset, main = NULL)
summary(dataset)
plot(japanesepines, main = NULL)
summary(japanesepines)
intensity(japanesepines)
lam <- intensity(japanesepines)
sqrt(lam/area(Window(japanesepines)))
Q <- quadratcount(cells, nx=2, ny=2)
Q
Q <- quadratcount(japanesepines, nx=2, ny=2)
Q
intensity(Q)
d <- as.numeric(intensity(Q))
mean(d)
sqrt(var(d) / (length(d) - 1))
quadrat.test(japanesepines)
plot(quadrat.test(japanesepines), add = TRUE)
quadrat.test(japanesepines, nx = 2, ny = 2)
d <- density(cells, edge = TRUE, kernel="gaussian")
plot(d, main = NULL)
d <- density(japanesepines, edge = TRUE, kernel="gaussian")
plot(d, main = NULL)
fryplot(japanesepines, main = NULL)
K <- Kest(cells)
K <- Kest(japanesepines)
plot(K, main=NULL, legend = FALSE)
X <- rpoispp(100)
plot(Kest(X), main=NULL)
K
plot(Lest(japanesepines), main = NULL)
plot(pcf(japanesepines), main = NULL)
a <- capture.output(plot(envelope(japanesepines, Kest),
main = NULL, legend = FALSE))
a <- capture.output(e <- envelope(cells, Kest, nsim = 39))
e
a <- capture.output(plot(envelope(cells, Kest, nsim = 19,
global = TRUE), main = NULL, legend = FALSE))
a <- capture.output(e <- envelope(japanesepines, Kest, nsim = 39))
e
a <- capture.output(plot(envelope(japanesepines, Kest, nsim = 19,
global = TRUE), main = NULL, legend = FALSE))
a <- capture.output(plot(envelope(cells, Lest, nsim = 19,
global = TRUE), main = NULL, legend = FALSE))
a <- capture.output(plot(envelope(japanesepines, Lest, nsim = 19,
global = TRUE), main = NULL, legend = FALSE))
Fc <- Fest(japanesepines)
plot(Fc, main = NULL)
plot(K, main=NULL, legend = FALSE) # All the line have a similar behavior to the blue one (theoretical K-function of the CSR) and they are all below it, which may suggest that the pattern is regular.
plot(Lest(japanesepines), main = NULL) # Besag’s L-function shows very similar results to the K-function
plot(pcf(japanesepines), main = NULL) # The green line is constantly crossed, so it is difficult to say if we have a clustering or a regular pattern.
a <- capture.output(plot(envelope(japanesepines, Kest),
main = NULL, legend = FALSE)) # Another prove of the data comming from an CSR.
a <- capture.output(plot(envelope(japanesepines, Lest, nsim = 19,
global = TRUE), main = NULL, legend = FALSE)) # Another prove of the data comming from an CSR.
plot(Fc, main = NULL)
a <- capture.output(plot(envelope(japanesepines, Fest, nsim = 39),
main = NULL, legend = FALSE))
Gc <- Gest(japanesepines)
plot(Gc, main = NULL)
Jc <- Jest(japanesepines)
plot(Jc, main = NULL)
plot(Gc, main = NULL)
plot(Jc, main = NULL)
pfit <- ppm(japanesepines, ~1)
pfit
pfit <- ppm(cells, ~x)
plot(pfit)
plot(pfit)
pfit <- ppm(japanesepines, ~1)
pfit
pfit <- ppm(japanesepines, ~x)
plot(pfit)
pfit
summary(pfit)
fit1 <- ppm(japanesepines, ~ 1)
fit2 <- ppm(japanesepines, ~ x)
anova(fit1, fit2, test = "LR")
AIC(fit1)
AIC(fit2)
plot(japanesepines, main = NULL)
plot(dataset, main = NULL)
summary(japanesepines)
intensity(japanesepines) # average intensity per unit area
sqrt(lam/area(Window(japanesepines)))
Q <- quadratcount(japanesepines, nx=2, ny=2)
Q
intensity(Q)
d <- as.numeric(intensity(Q))
mean(d)
sqrt(var(d) / (length(d) - 1)) # The standard error is higher then line 15, it may indicate diferences between the four bloks, but the difference is small, so lets run the following test.
quadrat.test(japanesepines) # The null hipotesis is not rejected, so we consider the data as a homogeneous Poisson process (CSR).
plot(quadrat.test(japanesepines), add = TRUE)
d <- density(japanesepines, edge = TRUE, kernel="gaussian")
plot(d, main = NULL)
d
fryplot(japanesepines, main = NULL)
K <- Kest(japanesepines)
plot(K, main=NULL, legend = FALSE) # All the line have a similar behavior to the blue one (theoretical K-function of the CSR) and they are all below it, which may suggest that the pattern is regular.
K
plot(Lest(japanesepines), main = NULL) # Besag’s L-function shows very similar results to the K-function
plot(pcf(japanesepines), main = NULL) # The green line is constantly crossed, so it is difficult to say if we have a clustering or a regular pattern.
a <- capture.output(plot(envelope(japanesepines, Kest),
main = NULL, legend = FALSE)) # Another prove of the data comming from an CSR.
a <- capture.output(plot(envelope(japanesepines, Lest, nsim = 19,
global = TRUE), main = NULL, legend = FALSE)) # Another prove of the data comming from an CSR.
Fc <- Fest(japanesepines)
plot(Fc, main = NULL) # As we are looking to an F-function, the lines below the blue one suggest clustering, but they are very close to the CSR line.
Gc <- Gest(japanesepines)
plot(Gc, main = NULL)
Jc <- Jest(japanesepines)
plot(Jc, main = NULL)
quadrat.test(japanesepines)
pfit <- ppm(japanesepines, ~1)
pfit
fit1 <- ppm(japanesepines, ~ 1)
fit2 <- ppm(japanesepines, ~ x)
anova(fit1, fit2, test = "LR") # X term is not significant
AIC(fit1)
AIC(fit2)
pfit
plot(pfit)
install.packages("shiny")
library(shiny)
runExample("01_hello")
dev.off()
install.packages("shinyWidgets")
shiny::runApp('C:/Master/Data_Visualization/Application/Pruebas')
runApp('C:/Master/Data_Visualization/Application/Pruebas')
runApp('C:/Master/Data_Visualization/Application/Pruebas')
runApp('C:/Master/Data_Visualization/Application/Pruebas')
setwd("C:/Master/TFM/Sales_Dataset")
df <- read.csv("sales_train", header = TRUE)
setwd("C:/Master/TFM/Sales_Dataset")
df <- read.csv("sales_train", header = TRUE)
df <- read.csv("items", header = TRUE)
df <- read.csv("C:/Master/TFM/Sales_Dataset/items", header = TRUE)
df <- read.csv("C/Master/TFM/Sales_Dataset/items", header = TRUE)
df <- read.csv("C/Master/TFM/Sales_Dataset/items.csv", header = TRUE)
df <- read.csv(file = "C/Master/TFM/Sales_Dataset/items.csv", header = TRUE)
df <- read.csv(file = 'C/Master/TFM/Sales_Dataset/items.csv', header = TRUE)
df <- read.csv(file = 'C:/Master/TFM/Sales_Dataset/items.csv', header = TRUE)
:
df <- read.csv(file = 'C:/Master/TFM/Sales_Dataset/items.csv', header = TRUE)
df <- read.csv(file = 'C:/Master/TFM/Sales_Dataset/sales_train.csv', header = TRUE)
View(df)
df$date
max(df$item_cnt_day)
min(df$item_cnt_day)
max(df$item_price)
